1. 设置账号
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ git config --list

2. 创建与提交
$ git init 初始化一个Git版本库
$ git add -- <file> 命令可以将文件提交到暂存区，-- 用来避免歧义指定文件名
$ git commit -m "message" 命令可以将文件从暂存区提交到版本库

3. 状态
$ git status 命令可以查询工作区状态：文件是否修改，是否进入暂存区
$ git diff HEAD -- readme.txt 命令可以查看修改内容
$ git log 命令显示从最近到最远的提交日志
  - --oneline 显示一行
  - --decorate 显示分支信息

4. 跳转版本
$ git reset --hard HEAD^ 可以回到上个版本 HEAD^^指向上上个版本，HEAD~100指向往上数100个版本
$ git reset --hard commit_id 在版本间穿梭
$ git reflog 用来记录你的每一次命令, 以便确定要回退的版本

5. 概念
- 版本库(Repository)：隐藏目录.git，它是Git的版本库
  - 暂存区(Stage/Index)：git add命令就是将文件提交到暂存区
  - master分支：创建Git版本库时，Git会自动创建唯一一个master分支
  - HEAD指针：GIt会自动创建一个一开始指向master的HEAD指针
- 工作区(Working Directory)：除.git外的文件和目录属于工作区

6. 撤销
$ git checkout -- filename 
  - 修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
  - 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
$ git reset HEAD <file>
  - 撤销暂存区文件

7. 远程库关联管理
$ ssh-keygen -t rsa -C "youremail@example.com"  创建私钥公钥 ~/.ssh，id_rsa 和 id_rsa.pub
$ git remote -v  查看远程库的信息
$ git remote add origin https://github.com/xxxx/xxxx.git 关联远程库
$ git remote rm origin  删除关联的origin远程库
$ git push -u origin master 第一次推送 master 分支的所有内容
$ git push origin master 后续推送最新修改
$ git clone 克隆仓库到本地

8. 分支管理
$ git branch 查看所有分支
$ git branch dev 创建分支 dev
$ git switch dev / $ git checkout dev 切换分支
$ git switch -c dev / git checkout -b <name>创建并切换
$ git branch -d dev 删除分支 dev

9. 分支冲突
$ git merge dev 命令将 dev 分支的工作成果合并到当前分支
  - --no-ff 删除分支 dev 后仍然保留 merge from dev 信息
$ git log --graph
- master 发布 dev 开发 yourname 自己开发

10.



